---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by PC GAMING.
--- DateTime: 3/12/2023 1:11 PM
---

-----------------------------------------------
-- UTILITIES
-----------------------------------------------

function GetPlayersWithTrait(sTrait)
	local tValid = {}
	iLength = 0

	for _, iPlayer in pairs(PlayerManager.GetWasEverAliveIDs()) do
		local leaderType = PlayerConfigurations[iPlayer]:GetLeaderTypeName()
		for trait in GameInfo.LeaderTraits() do
			if trait.LeaderType == leaderType and trait.TraitType == sTrait then
				tValid[iPlayer] = Players[iPlayer]
				iLength = iLength + 1
			end
		end
		if not tValid[iPlayer] then
			local civType = PlayerConfigurations[iPlayer]:GetCivilizationTypeName()
			for trait in GameInfo.CivilizationTraits() do
				if trait.CivilizationType == civType and trait.TraitType == sTrait then
					tValid[iPlayer] = Players[iPlayer]
					iLength = iLength + 1
				end
			end
		end
	end
	return tValid, iLength
end

-----------------------------------------------
-- VARIABLES
-----------------------------------------------

local sTraitLithuania = "TRAIT_CIVILIZATION_RWB_DIEVDIRBIAI"
local tLithuanianPlayers, iLithuanianPlayer = GetPlayersWithTrait(sTraitLithuania)

local tFeatures = {}
tFeatures.FEATURE_FOREST 					= 'FEATURE_FOREST_APPEAL_TWO_PLUS'
tFeatures.FEATURE_JUNGLE 					= 'FEATURE_JUNGLE_APPEAL_TWO_PLUS'
tFeatures.FEATURE_MARSH 					= 'FEATURE_MARSH_APPEAL_TWO_PLUS'
tFeatures.FEATURE_OASIS 					= 'FEATURE_OASIS_APPEAL_TWO_PLUS'
tFeatures.FEATURE_FLOODPLAINS 				= 'FEATURE_FLOODPLAINS_APPEAL_TWO_PLUS'
tFeatures.FEATURE_FLOODPLAINS_GRASSLAND 	= 'FEATURE_FLOODPLAINS_GRASSLAND_APPEAL_TWO_PLUS'
tFeatures.FEATURE_FLOODPLAINS_PLAINS 		= 'FEATURE_FLOODPLAINS_PLAINS_APPEAL_TWO_PLUS'
tFeatures.FEATURE_BURNING_FOREST 			= 'FEATURE_BURNING_FOREST_APPEAL_TWO_PLUS'
tFeatures.FEATURE_BURNT_FOREST				= 'FEATURE_BURNT_FOREST_APPEAL_TWO_PLUS'
tFeatures.FEATURE_BURNING_JUNGLE 			= 'FEATURE_BURNING_JUNGLE_APPEAL_TWO_PLUS'
tFeatures.FEATURE_BURNT_JUNGLE 				= 'FEATURE_BURNT_JUNGLE_APPEAL_TWO_PLUS'
tFeatures.NULL 								= 'FEATURE_DUMMY_APPEAL_TWO_PLUS'


-----------------------------------------------
-- FUNCTIONS
-----------------------------------------------

function AppealDummyUpdate( playerID, cityID)

		local localPlayerID = Game.GetLocalPlayer();
	
		if not tLithuanianPlayers[localPlayerID] then return end
	
		print("Players with Lithuania is normally ID : ",localPlayerID," and is tweaking city : ",cityID)
	
		-- local sFeatureType = tFeatureLocations[iPlotIndex]
		-- print("i = " .. i .. ", " .. sFeatureType .. " at (" .. iPlotX .. ", " .. iPlotY .. ")")

		-- for m, pFeature in GameInfo.Features do
		-- 	local sFeatureName = Locale.Lookup(pFeature.Name)
		-- 	print("Index ID : ",pFeature," is : ",sFeatureName)
		-- end
	
		local LithuPlayer			= Players[localPlayerID]
		local LithuCities = LithuPlayer:GetCities()
		local tCities = {}
	
		for i, iCity in LithuCities:Members() do
			table.insert(tCities, iCity)
		end
	
		for j, pCity in pairs(tCities) do
			
			local tPlots = {}
			tPlots = pCity:GetOwnedPlots()
	
			for k, iPlot in pairs(tPlots) do
				local iPlotAppeal = iPlot:GetAppeal()
				
	
				if iPlotAppeal >= 2 then
					print("Appeal : ",iPlotAppeal," in Plot : ",iPlot,"is >= (superior or equal to) to 2")
					-- for m, pFeature in GameInfo.Features.Index() do
					--     local sFeatureName = Locale.Lookup(pFeature.Name)
					--     print(pFeature," : ",sFeatureName)
					-- end
					
					-- need xy de iPlot?
					
					--local sDistrict = GameInfo.Features[featureType].DistrictType
					
					local fType = iPlot:GetFeatureType()
					--local iFeatureIndex = GameInfo.Features[fType].Index

					TerrainBuilder.SetFeatureType(iPlot,tFeatures[fType])

					iFeatureIndex = switch {
						[GameInfo.Features['FEATURE_FOREST_APPEAL_TWO_PLUS'						].Index] = function() print("Plot ",iPlot," got ",tFeatures[fType]) end,
						[GameInfo.Features['FEATURE_JUNGLE_APPEAL_TWO_PLUS'						].Index] = function() print("Plot ",iPlot," got ",tFeatures[fType]) end,
						[GameInfo.Features['FEATURE_MARSH_APPEAL_TWO_PLUS'						].Index] = function() print("Plot ",iPlot," got ",tFeatures[fType]) end,
						[GameInfo.Features['FEATURE_OASIS_APPEAL_TWO_PLUS'						].Index] = function() print("Plot ",iPlot," got ",tFeatures[fType]) end,
						[GameInfo.Features['FEATURE_FLOODPLAINS_APPEAL_TWO_PLUS'				].Index] = function() print("Plot ",iPlot," got ",tFeatures[fType]) end,
						[GameInfo.Features['FEATURE_FLOODPLAINS_GRASSLAND_APPEAL_TWO_PLUS'		].Index] = function() print("Plot ",iPlot," got ",tFeatures[fType]) end,
						[GameInfo.Features['FEATURE_FLOODPLAINS_PLAINS_APPEAL_TWO_PLUS'			].Index] = function() print("Plot ",iPlot," got ",tFeatures[fType]) end,
						[GameInfo.Features['FEATURE_BURNING_FOREST_APPEAL_TWO_PLUS'				].Index] = function() print("Plot ",iPlot," got ",tFeatures[fType]) end,
						[GameInfo.Features['FEATURE_BURNT_FOREST_APPEAL_TWO_PLUS'				].Index] = function() print("Plot ",iPlot," got ",tFeatures[fType]) end,
						[GameInfo.Features['FEATURE_BURNING_JUNGLE_APPEAL_TWO_PLUS'				].Index] = function() print("Plot ",iPlot," got ",tFeatures[fType]) end,
						[GameInfo.Features['FEATURE_BURNT_JUNGLE_APPEAL_TWO_PLUS'				].Index] = function() print("Plot ",iPlot," got ",tFeatures[fType]) end,
						[GameInfo.Features['FEATURE_DUMMY_APPEAL_TWO_PLUS'						].Index] = function() print("Plot ",iPlot," got ",tFeatures[fType]) end,
						default = function (x) print("no feature to replace") end,
					  }

					
				else
					print("Appeal : ",iPlotAppeal," in Plot : ",iPlot,"has low appeal")
				end
	
			end
		end
	
	end




	





Events.CityWorkerChanged.Add(AppealDummyUpdate);
Events.CityFocusChanged.Add(AppealDummyUpdate);
